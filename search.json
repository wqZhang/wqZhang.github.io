[{"title":"给我宝宝写的下载推送kindle电子书教程","url":"/2017/08/31/20170831-kindle-to-xy/","content":"我的宝宝是个文学作品爱好者，生日礼物给她买了kindle，不过还没教她怎么把电子书放到kindle去\n所以这篇文章写给我的智障宝宝\n嗯，应该是比较智障的教程了 --！\n\n<!-- more -->\n有点长，你也可以[点我直接看最简单的方法](#jump)\n\n想要把电子书放到kindle里，第一步，你的先买一部kindle\n![机智](http://img.wqzhang.top/jizhiruwo.jpg)\n好吧，我知道你想说这不是废话么。。。。额，的确是废话，下面我们开始认真的讲(基于你已经买了kindle，不限版本)\n\n- 第一步，注册一个亚马逊账号，并把kindle绑定到你的账号上\n  这一步我已经做完了，所以我就不写了，下面是我宝宝的账号\n  <b>用户名是你的电话号码，密码是你的生日，比如我的生日是90年7月28，那么就是19900728</b>\n\n- 第二步，要配置好一些能推送的邮箱，这一块可以在亚马逊的首页的 我的账户 -> 管理我的内容和设备 -> 设置一栏里面设置，在设置的最下面有已认可的发件人电子邮箱列表，这里可以管理允许推送的邮箱,如图\n![z1](http://img.wqzhang.top/kindle1.jpg)\n![z2](http://img.wqzhang.top/kindle2.jpg)\n![z3](http://img.wqzhang.top/kindle3.jpg)\n\n- 第三步就可以下载推送电子书了，首先我们看看它支持的格式\n![z4](http://img.wqzhang.top/kindle4.jpg)\n\n最主要的就是**azw**和**mobi**这两种格式，其他的像txt和pdf也是可以的，不过一般我们就用**azw**和**mobi**格式，下载推送电子书一般有两种方式\n\n1. 直接在亚马逊上购买，就像买东西一样，买电子书，因为你的账号和你的kindle已经绑定了，所以你买了书就直接推送到你的kindle，这是最方便的\n2. 自己在网上下载电子书，然后用配置好的邮箱推送到kindle\n   这种方式说白了就是给自己的kindle发邮件，而电子书是附件，比如\n![z5](http://img.wqzhang.top/kindle5.jpg)\n\n这里面发件人就是你，收件人就是你kindle的邮箱，那么你的kindle邮箱号是多少呢？\n在刚才的设置可发送邮箱的上方有，另外我宝宝的就是 86电话号码@kindle.cn(电话号码就是你的电话号码！)\n\n那在哪里去找电子书呢，我喜欢在这个网站找  \n[http://readfree.me/](http://readfree.me/)\n我以前用kindle的时候就喜欢在这个网站下载书，挺多的，连程序猿的书都有挺多的，还有很多国外的。。。不过下载了都没看 --！\n现在它的规则改变了很多，现在是每天登陆可以获得1-4积分，1积分可以下载或推送一本书，积分累计\n我给你申请了两个账号可以使用，有时候我就会登陆上去累计点积分\n```\n用户名：我的QQ@qq.com 密码：你的生日    也就是和亚马逊密码一样\n用户名：我的电话@163.com 密码：你的生日\n```\n(这里  **我的QQ**  和 **我的电话** 都需要换成现实中号码哦 ：)\n\n这个网站登录后会自动跳到亚马逊网站去签到，不用管，再重新到这个网站就好了，登录后是这个样子的：\n![z6](http://img.wqzhang.top/kindle10.jpg)\n上面的搜索栏可以搜你想看的书，书名，或者作者\n不要把字打错了哦，打错了可是搜不到了，比如我们要找阿城的书，就去搜阿城\n\n![z7](http://img.wqzhang.top/kindle11.jpg)\n\n然后我们选一本点击一下封面，比如《棋王》\n\n![z8](http://img.wqzhang.top/kindle12.jpg)\n\n上面会显示这本书的介绍，亚马逊购买地址，以及类似的书籍，下面是可以下载推送的版本：\n**这里我要说明有一下，之前就说了会有格式选择，kindle支持的格式是awz，mobi，txt，pdf**\n**但是awz是亚马逊电子版本，一般来说加密了的，外面一般没有，pdf在kindle上看支持不是很好，一般也不建议，mobi是我推荐的版本**\n**另外在选择下载的时候最好先看一下评论，以及文件大小，太小说明可能内容不全**\n![z9](http://img.wqzhang.top/kindle13.jpg)\n选择好了要下载的版本就可以点击下载，就会把电子书下载到本地了\n然后用邮件发送给自己的kindle，kindle里面就会有这本书了\n\n每次都还要下载再发邮件推送是不是太麻烦了，还有简单的方法，就是这个网站提供了自动推送的功能\n它需要在网站配置好你的kindle账号，在kindle管理添加好支持推送的邮箱，这些我都给你配置好了，你可以直接使用\n在我们下载按钮旁边就有推送的按钮：\n![z10](http://img.wqzhang.top/kindle14.jpg)\n点击推送边上的下拉图标，就会出来可以推送到的kindle账号，直接选我配置好的账号，点击就可以了\n这样，这本书就自动推送到你的kindle了\n在上面的头像图标那里可以点击，在个人中心里面看推送的结果：\n![z11](http://img.wqzhang.top/kindle15.jpg)\n![z12](http://img.wqzhang.top/kindle16.jpg)\n\n怎么样，是不是还是挺简单的，还有更简单的方法，<span id = \"jump\">**那就是你想看什么书的时候直接告诉我就好了，一切我来搞定**</span>\n哈哈哈\n\n![cankui](http://img.wqzhang.top/caikui.jpg)\n终于又来写一篇了。。。。","tags":["kindle 教程"]},{"title":"Windows系统下ignite坑，启动找不到主类","url":"/2017/07/06/20170706ignitefirst/","content":"最近一直没来更新，惭愧\n正好刚从ignite一个大坑出来，必须来记录下了\n\n<!--more-->\n\n正如我题目所说的，就是在windows系统下启动找不到主类的坑\n因为项目原因，我接触了Apache ignite这个东西，官方说它是\n`内存数据组织是高性能的、集成化的以及分布式的内存平台`。\n具体有哪些东西，让我引一张官方的图：\n![img1](https://files.readme.io/8fed3b7-apache-ignite.png)\n\n因为我也是第一次接触，所以就按照[官方文档](https://ignite.apache.org/)一步一步来安装，学习\n这里不得不说它们的[中文文档](https://www.zybuluo.com/liyuj/note/230739)棒棒哒！\n\n我下载了2.0版本的二进制版本，放在了`C:\\Program Files`目录下，然后安装新手教程进行启动，\n在命令行到`bin`目录下运行ignite.bat文件，文档说的很清楚，出现以下提示就说明成功了：\n\n\t[02:49:12] Ignite node started OK (id=ab5d18a6)\n\t[02:49:12] Topology snapshot [ver=1, nodes=1, CPUs=8, heap=1.0GB]\n\n但是我这确报错了。。。得到下面的提示\n\n![img2](http://img.wqzhang.top/ignite07064.png)\n\n我就奇了怪了，这还能找不到主类，对比了文件大小，和网上的数据是一样的\n仔细看了下，上面提示说考虑把ignite-spring路径放到classpath\n\n对比文档，这种错误应该是配置了ignite-spring模块但是没有引入ignite-spring相关包\n只需要去lib下加入ignite-spring的相关jar依赖就行了\n\n但是！\n\n![img3](http://img.wqzhang.top/ignite07063.png)\n\n我的lib下已经加入了ignite-spring包仍然报错。。。。。这。。扎心了，老铁\n无奈的我只能去加了几个QQ群问问大神。。。都表示没遇到过这个错误\n这个时候有个朋友说了句会不会是空格的问题，刚开始我还没意识到他的意思，\n我什么都还没开始，配置也没动过，哪里有空格呢？\n后来才看到。。。。我的项目存放的路径 `C:\\Program Files` \n妹的。。不会吧。。。。我试这把项目拷贝到C盘下，重新配置Path变量，再尝试\n\n![img4](http://img.wqzhang.top/ignite07065.png)\n\n终于正常了，果然问题是出在那个空格上，导致读不到相关的模块依赖而报错。。。\n而我一直在这个问题上困扰了好久。。。知道真相后，我斯巴达了。。。\n后面继续学习了，这个坑。。应该是我自己给自己挖的坑吧。。。。\n好了，后面学习的其他问题也回来更新的，鼓捣拜","tags":["ignite"]},{"title":"更新畅言为评论系统","url":"/2017/05/22/think20170522/","content":"\n之前一直用的友言做第三方评论系统，不知道怎么回事就罢工了\n客服找了，也留言了，都没反应\n算了算了，谁让我用别人免费的呢\n你不让我用，那我就只能换一家了\n\n现在网站访问友言的JS直接就报网关错误了。。。不知道其他用户有没有这个现象 --！\n\n![yoiyan](http://img.wqzhang.top/youyan1.jpg)\n\n<!--more-->\n\n我给他们客服留了言，一直没回应，然后本想加他们客服QQ群去了解下情况\n谁知道一搜官方的QQ号，居然是一个蜂蜜买卖群\n\n![youyan2](http://img.wqzhang.top/youyan22.jpg)\n\n这。。。\n\n![biaoqing](http://img.wqzhang.top/wulianku.jpg)\n\n\n所以，暂时我也只能换个方案了。。。也就是现在用的方案————来自sohu的 畅言\n怎么说呢，讲个就把，自定义功能也还好\n~~后面我也会继续跟友言官方联系一下，尽量还是换回来~~\n~~毕竟颜值也高啊！哈哈哈~~\n已经各种联系过友言官方了\n原来好久之前已经没人专门维护了\n那。。就这样吧，goog bye\n\n\n后记：两三周没更新了，内心满满的负罪感，不努力会很轻松。。。No No No\n这不是我想的，我会补上来的","tags":["友言 畅言 评论系统"]},{"title":"初次使用GraphQL","url":"/2017/04/28/graphsql2/","content":"第一次使用graphQL进行数据的查询和读取\n总的来说，graphQL本身挺好理解的,它是定义了新的一种数据交流方式\n由于我用的是`java`语言，所以这里用了[graphql-java](https://github.com/graphql-java/graphql-java)的实现\n但是中间有个关键点被我误解了，耽误了挺久的 --！\n<!--more-->\n\n构建了一个简单的书本信息和分类信息表进行测试，表结构如下：\n```java\n\t//book\n\t@Id\n\tprivate String id;\n\tprivate String name;\n\tprivate String book_category_id;\n\t\n\t//book_category\n\t@Id\n\tprivate String id;\n\tprivate String name;\n```\n主要想用graphQL来显示单个查询和关联查询，并且对返回的字段可控制\n项目使用了Spring-boot以及JPA来构建\n\n在graphQL中，首先根据数据库结构定义返回结构体，也就是`GraphQLOutputType`对象\n在我们的项目中，有两个返回结构体需要定义\n```java\n\tprivate GraphQLOutputType bookType;\n\tprivate GraphQLOutputType categoryType;\n```\n然后定义一个初始化方法对上面两个`GraphQLOutputType`初始化\n```java\n\t/**\n\t * book\n\t */\n\tcategoryType = newObject()\n\t        .name(\"BookCategory\")\n\t        .field(newFieldDefinition().name(\"id\").type(GraphQLString).build())\n\t        .field(newFieldDefinition().name(\"name\").type(GraphQLString).build())\n\t        .build();\n\t\t\n\t/**\n\t * book\n\t */\n\tbookType = newObject()\n\t         .name(\"Book\")\n\t         .field(newFieldDefinition().name(\"id\").type(GraphQLString).build())\n\t         .field(newFieldDefinition().name(\"name\").type(GraphQLString).build())\n\t         .field(newFieldDefinition().name(\"book_category_id\").type(GraphQLString).build())\n\t         .field(newFieldDefinition().name(\"bookCategory\").type(categoryType).build())\n\t         .build();\n\t}\n```\n然后根据上面定义的结构，定义所需要返回的结构\n这里有两点需要注意，定义的`name`属性对应了返回的具体结构体\n另一个点就是坑我挺久的`dataFetcher`,它只提供了结构，不会帮你去获取数据\n具体数据信息还是需要自己去获取，不管你是使用原生的jdbc，还是jpa，或者其他持久层框架\n并且返回的数据结构需要和定义的一致\n\n我这里定了两个返回结构，book对应单本书籍信息，books对应书本列表信息：\n```java\n\tprivate GraphQLFieldDefinition createBookField() {\n        return GraphQLFieldDefinition.newFieldDefinition()\n                .name(\"book\")\n                .type(bookType)\n                .argument(newArgument().name(\"id\").type(GraphQLString).build())\n                .dataFetcher(environment -> {\n                \tString id = environment.getArgument(\"id\");\n                    logger.debug(id);\n\n                \tBook book = bookService.getBookById(id);\n                \treturn book;\n                })\n                .build();\n    }\n\t\n    private GraphQLFieldDefinition createBooksField() {\n        return GraphQLFieldDefinition.newFieldDefinition()\n                .name(\"books\")\n                .type(new GraphQLList(bookType))\n                .dataFetcher(environment -> {\n                    \n                    List<Book> list = new ArrayList<Book>();\n                    list = bookService.getAllBooks();\n                \treturn list;\n                })\n                .build();\n    }\n```\n\n`tyep`属性里对象名就是对应了我们上面定义的`GraphQLOutputType`对象\n如果返回的是数组，就需要用`GraphQLList`对象进行包裹\n在`book`返回结构体重还定义了`argument`参数，这样可以通过参数来获取对应的数据\n\n最后我们再把定义好的返回方法与GraphQLSchema对象设置好，这个对象才是我们在controller\n里的操作对象，再将设置好的对象返回：\n```java\n\tpublic GraphQLSchema getGraphSchema() {\n        initOutputType();\n        schema = GraphQLSchema.newSchema().query(newObject()\n                .name(\"GraphQuery\")\n                .field(createBookField())\n                .field(createBooksField())\n                .build()).build();\n        return schema;\n    }\n```\n\n最后我们在定义一个控制器用来访问数据，由于通过graphQL读取数据需要给出一个数据结构，\n我提供了一个默认的结构：\n```java\n\t@RequestMapping(value = \"/books\", method = RequestMethod.GET, produces = \"application/hal+json;charset=UTF-8\")\n\tpublic HttpEntity<?> getBatch(@RequestParam(required = false, \n\t\tdefaultValue = \"{books {id,name,bookCategory{name}}}\") String query) {\n\t\t\n\t\tlogger.debug(query);\n\t\tGraphQLSchema schema = graphQLTest.getGraphSchema();\n\t\t\n\t\tMap<String, Object> result2 = (Map<String, Object>) new GraphQL(schema).execute(query).getData();\n\t\t\n        return new ResponseEntity<>(result2, HttpStatus.OK);\n    }\n```\n把整个项目运行起来就可以看到相关的结果了：\n\n1.采用默认的query语句`{books {id,name,bookCategory{name}}}`\n![pic1](http://img.wqzhang.top/graphqlresult1.png)\n\n2.更换query语句结构为`{books {id,name}}`\n![pic2](http://img.wqzhang.top/graphqlresult2.png)\n\n3.更换query查询类型，通过id查询单个book信息`{book (id:\"1\") {id,name,bookCategory{name}}}`\n![pic3](http://img.wqzhang.top/graphqlresult3.png)\n\n至于grapgQL的其他特性，包括更新数据等等，我将会在后面更新，thanks！\n","tags":["graphql"]},{"title":"说说我这段时间","url":"/2017/04/10/think20170410/","content":"\n![head](http://img.wqzhang.top/timg.jpg)\n这段时间比较烦躁\n感觉不知道接下来的路怎么走了\n\n<!--more-->\n\n做程序开发有三年了，但是一直做的是外包项目\n外包还真是像外界说的那样\n反正能不进外包就别进外包吧\n\n\n别人进的外包都是成天加班，需求一天到晚都有\n我经历的几个外包却都比较清闲\n真不知道我是该开心还是该忧伤\n毕竟过得轻松，但是也没学到太多东西\n\n\n三年时间确实太快\n去年因为一些原因来到现在这家公司\n但是也是外包，但是技术和项目相对来说更符合发展\n想着终于可以锻炼下自己\n过完年再来的时候这边项目感觉要黄了一样\n我是做后端微服务开发\n一个月都没啥需求\n我也是苦笑不得\n目前也都是修补修补发现的bug，新的需求基本没有\n\n\n过完年觉得在外包呆着确实也不是个长久之计\n投过几家简历\n不过确实着两三年学的太少，或者说不深\n接触过很多，但是沉淀下去了解的太少\n\n\n觉得最近心情也是浮躁，不知道自己该怎么走下去了\n按说做了三年程序开发应该基础业务都有一定发展\n但是现在感觉自己却很多都是一知半解\n想深入地学一样东西又不知道怎么下手\n\n\n现在这么继续下去也可以过下去\n却不是我想要的\n想要改变，却又找不到啥办法\n今天还投了家公司，投完现在感觉又不想去了\n感觉又不想改变一样，麻蛋\n\n\nPS，面试完了，估计是不会去的，\n现在还是稳定为主吧","tags":["记事"]},{"title":"GrapgQL介绍(一)","url":"/2017/04/05/graphql1/","content":"\n最近在学习[GraphQL](http://www.graphql.org/) API查询语言，想把官网的介绍文档翻译一下，学习的同时分享知识。\n\n\n\n> 这一系列的文章是关于学习GraphQL怎么工作以及怎么使用。寻找怎么构建一个GraphQL服务？\n> 这里有一些继承于GraphQL的多种语言的库。\n\n<!--more-->\n\nGraphQL是一种针对你的API的查询语言，也是一种通过你对你的数据定义范式执行查询的服务器端运行时。\nGraphQL不会绑定特定的数据库或者存储引擎而是使用你当前的代码和数据。\n\n\n一个GraphQL服务通过定义范式和范式里的字段来创建，然后为范式里的每一个字段提供功能。\n例如，下面的GraphQL服务告诉我们谁登陆了(我)以及登陆用户的名称等一些信息：\n\n\ttype Query {\n\t\tme: User\n\t}\n\n\ttype User {\n\t\tid: ID\n\t\tname: String\n\t}\n\n匹配范式里每一个字段功能：\n\n\tfunction Query_me(request) {\n\t  return request.auth.user;\n\t}\n\n\tfunction User_name(user) {\n\t  return user.getName();\n\t}\n\n当一个GraphQL服务运行时(通常是一个web服务的一条URL)，它会接收GraphQL查询请求来验证和执行。\n接收的查询首先会被检查是不是只关联到定义好的范式和字段，然后运行提供的函数产生结果。\n\n一个查询的例子：\n\n\t{\n\t  me {\n\t\tname\n\t  }\n\t}\n\n生成的JSON结果：\n\n\t{\n\t  \"me\": {\n\t\t\"name\": \"Luke Skywalker\"\n\t  }\n\t}\n\t\n学习更多GraphQL -- 查询语言，范式系统，GraphQL服务如何工作以及\n使用QraphQL解决问题的最佳实践 -- 请阅读以下章节。\n\n# 查询和修改(Queries and Mutations)\n\n在这个章节，你将详细地学习如何在一个GrapQL服务器上查询。\n\n### 字段(Fields)\n\n最基本的，GraphQL可以请求对象上的指定字段。让我们看一个非常简单的查询以及结果：\n\n\t{\n\t  hero {\n\t\tname\n\t  }\n\t}\n\t结果：\n\t{\n\t  \"data\": {\n\t\t\"hero\": {\n\t\t  \"name\": \"R2-D2\"\n\t\t}\n\t  }\n\t}\n\n你可以直接地看到查询语句和结果是一样的结构。这是GraphQL最基本的功能，因为服务器明确地知道客户\n需要哪些字段，所以你可以得到你预期的结果。\n\n在上面的例子中，字段name作为一个string类型返回，那个名字是星际大战主英雄的名字，`R2-D2`。\n\n\n> 顺便提一句 - 上面的查询语句是交互式的。也就是你可以按你的意愿改变结构并且得到对应的结果。\n> 尝试在`hero`对象的查询语句里增加一个`appearsIn`字段并看看新的结果。\n\n在上个例子中，我们得到了个字符串当我们要求返回hero的name字段，其实返回的字段也可以是对象。\n在例子中，你可以为返回的对象设置级联字段*sub-selection*。GraphQL查询可以联通相关的对象以及字段，\n让客户端在一个请求中得到所有需要的相关数据，而不是像传统REST架构那样向服务器往返请求多次。\n\n\t{\n\t  hero {\n\t\tname\n\t\t# Queries can have comments!\n\t\tfriends {\n\t\t  name\n\t\t}\n\t  }\n\t}\n\t结果：\n\t{\n\t  \"data\": {\n\t\t\"hero\": {\n\t\t  \"name\": \"R2-D2\",\n\t\t  \"friends\": [\n\t\t\t{\n\t\t\t  \"name\": \"Luke Skywalker\"\n\t\t\t},\n\t\t\t{\n\t\t\t  \"name\": \"Han Solo\"\n\t\t\t},\n\t\t\t{\n\t\t\t  \"name\": \"Leia Organa\"\n\t\t\t}\n\t\t  ]\n\t\t}\n\t  }\n\t}\n\n注意上面的例子，字段`friends`返回了一个数组。GraphQL查询对于单个项和列表项看起来相同，\n但是我们根据给定的模式知道预期的内容。\n\n\n### 参数(Arguments)\n\n如果我们唯一可以做的只是遍历对象以及其字段，那GraphQL已经是获取数据非常有用的语言。但是，当你\n将参数传递给字段时，这就变的更有趣了。\n\n\t{\n\t  human(id: \"1000\") {\n\t\tname\n\t\theight\n\t  }\n\t}\n\t结果：\n\t{\n\t  \"data\": {\n\t\t\"human\": {\n\t\t  \"name\": \"Luke Skywalker\",\n\t\t  \"height\": 1.72\n\t\t}\n\t  }\n\t}\n\n像REST系统，你只能传递一组参数-通过查询参数和请求URL。但是在GraphQL中，每个字段和嵌套对象都\n可以获得自己的一组参数。从而使GraphQL可以替代多个API提取。你甚至可以将参数传递到标量字段中，\n以便在服务器上实现数据转换，而不是分别在每个客户端上执行数据转换。\n\n\t{\n\t  human(id: \"1000\") {\n\t\tname\n\t\theight(unit: FOOT)\n\t  }\n\t}\n\t结果：\n\t{\n\t  \"data\": {\n\t\t\"human\": {\n\t\t  \"name\": \"Luke Skywalker\",\n\t\t  \"height\": 5.6430448\n\t\t}\n\t  }\n\t}\n\n参数可以是很多不同的类型。在上面的例子中，我们使用了一个枚举类型，它表示一组有限选项\n（在这种情况下是长度单位，或者是METER或FOOT）之一。GraphQL带有自己的默认类型，但是在GraphQL上\n也可以自定义类型，自定义类型也可以在传输数据的时候序列化。\n\n[更多GraplQL类型内容](http://graphql.org/learn/schema/)\n\n\n### 别名(Aliases)\n\n如果你观察仔细，你可能已经发现了，返回的结果对象字段的名字匹配查询的字段但不包括参数，\n所以你不能直接的通过不同的参数查询同样的字段。这样你就需要别名-它可以让你把返回的结果重命名\n成任何其他你想要的。\n\n\t{\n\t  empireHero: hero(episode: EMPIRE) {\n\t\tname\n\t  }\n\t  jediHero: hero(episode: JEDI) {\n\t\tname\n\t  }\n\t}\n\t结果：\n\t{\n\t  \"data\": {\n\t\t\"empireHero\": {\n\t\t  \"name\": \"Luke Skywalker\"\n\t\t},\n\t\t\"jediHero\": {\n\t\t  \"name\": \"R2-D2\"\n\t\t}\n\t  }\n\t}\n\n在上面的例子中，两个字段本应该有冲突，但是我们给他们定义了不同的别名后，\n就可以在一个请求中获取所有的结果。\n","tags":["graphQL"]},{"title":"Leo小站，我的所学所想","url":"/2017/03/29/firstpost/","content":"这是我第一篇博客，感觉搞技术的还是需要有一个记录所思的地方，也就有了这个博客网站\n目标是每周更新，对MD的语法也还不太熟悉，一切慢慢来\n也欢迎大家来这里分享，讨论！\n\n<!--more-->\n\n\n<img src=\"http://img.wqzhang.top/QQ%E5%9B%BE%E7%89%8720170324220626.jpg\" alt=\"pic\" width=\"800px\">\n\n<img src=\"http://img.wqzhang.top/QQ%E5%9B%BE%E7%89%8720170324220620.jpg\" alt=\"pic2\" width=\"800px\">\n\n<img src=\"http://img.wqzhang.top/QQ%E5%9B%BE%E7%89%8720170324220613.jpg\" alt=\"pic3\" width=\"800px\">\n\n\n以上\nGood Luck!","tags":["第一篇"]}]